"""
GitHub README Generator
-----------------------
Place this file in a repository and run:
    python github_readme_generator.py

What it does:
- Reads config from `readme_config.json` (if present) or uses built-in defaults
- Generates `README.md` based on the config
- Provides several toggles to turn sections on/off and change theme/badges

How to customize:
- Edit `readme_config.json` or change `DEFAULT_CONFIG` below
- `badges` is a list of badge objects (name, url, image)
- `projects` is a list of projects with title, desc, link, tags
- Toggle sections using booleans in `sections`

No external libs required. The code uses simple templating with Python f-strings.


Author: Auto-generated for Sanatan Singh
"""

import json
import os
from datetime import datetime

DEFAULT_CONFIG = {
    "name": "Sanatan Singh",
    "pronouns": "they/them",
    "headline": "AI/ML ‚Ä¢ LLMs ‚Ä¢ PyTorch ‚Ä¢ Computer Vision ‚Ä¢ System Design ‚Ä¢ CP",
    "about_lines": [
        "Passionate about solving challenging problems in AI/ML and system design.",
        "Building real-world projects in self-driving, LLMs, and scalable systems.",
        "Open to collaboration and impactful opportunities."
    ],
    "email": "rashmisingh00001@outlook.com",
    "linkedin": "https://www.linkedin.com/in/singhsanatan/",
    "github_username": "sanatan0511",
    "theme": "radical",  # used by some badges/stats endpoints (readme-stats themes)
    "badges": [
        {"image": "https://img.shields.io/badge/python-3670A0?style=for-the-badge&logo=python&logoColor=ffdd54", "link": "#"},
        {"image": "https://img.shields.io/badge/PyTorch-%23EE4C2C.svg?style=for-the-badge&logo=PyTorch&logoColor=white", "link": "#"},
        {"image": "https://img.shields.io/badge/System%20Design-%23007ACC.svg?style=for-the-badge&logo=architecture&logoColor=white", "link": "#"}
    ],
    "sections": {
        "show_stats": True,
        "show_trophies": True,
        "show_projects": True,
        "show_quote": True,
        "show_top_langs": True,
        "show_visit_count": True
    },
    "projects": [
        {"title": "Autonomous Driving Perception", "desc": "End-to-end perception stack using PyTorch and multi-sensor fusion.", "link": "https://github.com/sanatan0511/autonomous-perception", "tags": ["PyTorch", "CV", "Sensor-Fusion"]},
        {"title": "LLM-Pipeline", "desc": "A reusable pipeline to fine-tune LLMs and serve with FastAPI.", "link": "https://github.com/sanatan0511/llm-pipeline", "tags": ["LLM", "FastAPI"]}
    ],
    "custom_sections_order": ["about","badges","projects","stats","trophies","quote","top_langs","visit"]
}

CONFIG_PATH = "readme_config.json"

README_TEMPLATE = '''<!--- This README is auto-generated by github_readme_generator.py -->
# Hi there üëã I'm {name}  

**{headline}**  

{about_md}

---

## üåê Connect
{socials}

---

## üíª Tech Stack
{badges_md}

---

{projects_section}

{stats_section}

{trophies_section}

{quote_section}

{top_langs_section}

{visit_section}

---
*Generated on {generated_on}*
'''

PROJECT_ITEM = '* **[{title}]({link})** ‚Äî {desc}  
  Tags: {tags}'


def load_config():
    if os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            cfg = json.load(f)
            merge = DEFAULT_CONFIG.copy()
            merge.update(cfg)
            # For nested dicts like sections, do a shallow merge
            if 'sections' in cfg:
                s = DEFAULT_CONFIG['sections'].copy()
                s.update(cfg['sections'])
                merge['sections'] = s
            return merge
    return DEFAULT_CONFIG


def make_about_md(cfg):
    lines = cfg.get('about_lines', [])
    md = '\n'.join(f'- {l}' for l in lines)
    pron = cfg.get('pronouns')
    if pron:
        md += f"\n\n**Pronouns:** {pron}"
    return md


def make_socials(cfg):
    parts = []
    if cfg.get('linkedin'):
        parts.append(f"[![LinkedIn](https://img.shields.io/badge/LinkedIn-%230077B5.svg?logo=linkedin&logoColor=white)]({cfg['linkedin']})")
    if cfg.get('email'):
        parts.append(f"[![Email](https://img.shields.io/badge/Email-D14836?logo=gmail&logoColor=white)](mailto:{cfg['email']})")
    if cfg.get('github_username'):
        parts.append(f"[![GitHub](https://img.shields.io/badge/GitHub-000?style=for-the-badge&logo=github)](https://github.com/{cfg['github_username']})")
    return ' '.join(parts)


def make_badges_md(cfg):
    badges = cfg.get('badges', [])
    if not badges:
        return ''
    return ' '.join(f"[![]({b['image']})]({b.get('link','')})" for b in badges)


def make_projects_md(cfg):
    if not cfg['sections'].get('show_projects'):
        return ''
    projects = cfg.get('projects', [])
    if not projects:
        return ''
    items = '\n'.join(PROJECT_ITEM.format(title=p['title'], link=p['link'], desc=p['desc'], tags=', '.join(p.get('tags',[]))) for p in projects)
    return '## üî≠ Featured Projects\n' + items


def make_stats_md(cfg):
    if not cfg['sections'].get('show_stats'):
        return ''
    user = cfg.get('github_username') or 'your-username'
    theme = cfg.get('theme','dark')
    stats = f"![](https://github-readme-stats.vercel.app/api?username={user}&theme={theme}&hide_border=false&include_all_commits=true&count_private=true)"
    return stats


def make_trophies_md(cfg):
    if not cfg['sections'].get('show_trophies'):
        return ''
    user = cfg.get('github_username') or 'your-username'
    return f"![](https://github-profile-trophy.vercel.app/?username={user}&theme=radical&no-frame=false&no-bg=true&margin-w=4)"


def make_quote_md(cfg):
    if not cfg['sections'].get('show_quote'):
        return ''
    return '![](https://quotes-github-readme.vercel.app/api?type=horizontal&theme=radical)'


def make_top_langs_md(cfg):
    if not cfg['sections'].get('show_top_langs'):
        return ''
    user = cfg.get('github_username') or 'your-username'
    return f'![](https://github-readme-stats.vercel.app/api/top-langs/?username={user}&theme=radical&hide_border=false&include_all_commits=true&count_private=true&layout=compact)'


def make_visit_md(cfg):
    if not cfg['sections'].get('show_visit_count'):
        return ''
    user = cfg.get('github_username') or 'your-username'
    return f'[![](https://visitcount.itsvg.in/api?id={user}&icon=0&color=0)](https://visitcount.itsvg.in)'


def generate_readme(cfg):
    about_md = make_about_md(cfg)
    socials = make_socials(cfg)
    badges_md = make_badges_md(cfg)
    projects_section = make_projects_md(cfg)
    stats_section = make_stats_md(cfg)
    trophies_section = make_trophies_md(cfg)
    quote_section = make_quote_md(cfg)
    top_langs_section = make_top_langs_md(cfg)
    visit_section = make_visit_md(cfg)

    filled = README_TEMPLATE.format(
        name=cfg.get('name','Your Name'),
        headline=cfg.get('headline',''),
        about_md=about_md,
        socials=socials,
        badges_md=badges_md,
        projects_section=projects_section,
        stats_section=stats_section,
        trophies_section=trophies_section,
        quote_section=quote_section,
        top_langs_section=top_langs_section,
        visit_section=visit_section,
        generated_on=datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')
    )
    return filled


def save_readme(content, path='README.md'):
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f'Wrote {path}')


def write_default_config():
    if not os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(DEFAULT_CONFIG, f, indent=2)
        print(f'Created default {CONFIG_PATH}. Edit it and re-run to customize.')


def main():
    import argparse
    parser = argparse.ArgumentParser(description='Generate GitHub README from JSON config')
    parser.add_argument('--init', action='store_true', help='Create default readme_config.json')
    parser.add_argument('--out', default='README.md', help='Output file')
    args = parser.parse_args()

    if args.init:
        write_default_config()
        return

    cfg = load_config()
    readme = generate_readme(cfg)
    save_readme(readme, path=args.out)
    print('Done. You can edit readme_config.json to change content. Use --init to regenerate the default config.')


if __name__ == '__main__':
    main()
